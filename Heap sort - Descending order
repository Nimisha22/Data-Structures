Problem Statement:
Write a program to implement descending order heap and perform heapsort

------------------------------------------------------------------------------------
Code:


#include <stdio.h>
#include <stdlib.h>


typedef struct node {
    int data;
    struct node *left, *right;
} heap;


typedef struct {
    heap *data[20];
    int size;
} queue;
typedef queue stack;


void push(stack *s, struct node *val) {
    s->data[s->size] = val;
    s->size++;
}


heap *pop(stack *s) {
    heap *temp = s->data[s->size - 1];
    s->data[s->size] = NULL;
    s->size--;
    return temp;
}


void enqueue(queue *q, struct node *val) {
    q->data[q->size] = val;
    q->size++;
}


heap *dequeue(queue *q) {
    int i;
    heap *temp = q->data[0];

    for (i = 0; i < q->size - 1; i++)
        q->data[i] = q->data[i + 1];

    q->size--;
    return temp;
}


heap *newnode(int value) {
    heap *new = malloc(sizeof(heap));
    new->data = value;
    new->left = NULL;
    new->right = NULL;

    return new;
}


void swap(struct node *first, struct node *second) {
    int temp = first->data;
    first->data = second->data;
    second->data = temp;
}


// Function to return parent of last node
heap* get_last_parent(heap *h){
    if(h == NULL)
       return NULL;

    queue q = {.size = 0};
    enqueue(&q, h);

    heap *current = NULL;
    heap *possible_parent = NULL;

    while(q.size) {
        current = dequeue(&q);
        if(current == NULL)
            return possible_parent;

        if(current->left == NULL && current->right == NULL)
            return possible_parent;

        if((current->left != NULL && current->right == NULL) ||
           (current->left == NULL && current->right != NULL)){
            return current;
        }
        possible_parent = current;
        enqueue(&q, current->left);
        enqueue(&q, current->right);
    }

    return possible_parent;
}


// if parent < child swap them
void heapup(heap *h) {
    if (h == NULL)
        return;

    stack s = {.size = 0};
    push(&s, h);

    heap *current = h;
    heap *previous = NULL;

    do {
        // while current has children push it onto stack and move left
        while (current->left != NULL && current != previous) {
            push(&s, current);
            current = current->left;
        }

        current = pop(&s);

        if (current->left != NULL && current->data < current->left->data)
            swap(current, current->left);
        if (current->right != NULL && current->data < current->right->data)
            swap(current, current->right);

        if (current->right != NULL) {
            previous = current;
            current = current->right;
        }
        else
            previous = current;

      } while (s.size != 0);
}



// if parent < child then swap them
void heapdown(heap *h) {
    if (h == NULL) return;

    heap *current = h;
    heap *next = NULL, *previous = NULL;

    while (current->left != NULL || current->right != NULL) {
        if (current->left != NULL && current->data < current->left->data) {
            swap(current, current->left);
            next = current->left;
        }

        if (current->right != NULL && current->data < current->right->data) {
            swap(current, current->right);
            next = current->right;
        }

        previous = current;
        current = next;

        if(current == NULL || current == previous)
            break;
    }
}


// if left child > right child then swap their values
void levelbalance(heap *h) {
    if (h != NULL && h->left == NULL && h->right == NULL) return;

    queue q = {.size = 0};
    enqueue(&q, h);

    heap *current = NULL;

    while (q.size) {
        current = dequeue(&q);
        if (!current)
            continue;
        if(current->left == NULL && current->right == NULL)
            continue;

        if (current->left && current->right && current->left->data < current->right->data)
            swap(current->left, current->right);

        enqueue(&q, current->left);
        enqueue(&q, current->right);
    }
}


// Function to add a new element into heap
void add(heap **root, int value) {
    if (*root == NULL) {
        *root = newnode(value);
        return;
    }

    heap *current = NULL;
    queue q = {.size = 0};
    enqueue(&q, *root);

    while (q.size) {
        current = dequeue(&q);
        if (!current)
            continue;

        if (current->left == NULL) {
            current->left = newnode(value);
            break;
        }
        if (current->right == NULL) {
            current->right = newnode(value);
            break;
        }

        enqueue(&q, current->left);
        enqueue(&q, current->right);
    }

    heapup(*root);
    levelbalance(*root);
}


// Function to remove the root of heap
int rem(heap **h) {
    int temp;
    heap *current = *h;

    if(current == NULL)
        return 1 << 31 - 1;
    temp = current->data;

    // if both children of root are empty then delete root itself
    if(current->left == NULL && current->right == NULL){
        *h = NULL;
        heapdown(current);
        levelbalance(current);
        return temp;
    }

    heap *last_parent = get_last_parent(current);

    if(last_parent->right != NULL){
        swap(current, last_parent->right);
        free(last_parent->right);
        last_parent->right = NULL;
    }

    else {
        swap(current, last_parent->left);
        free(last_parent->left);
        last_parent->left = NULL;
    }

    heapdown(current);
    levelbalance(current);

    return temp;
}


// this function is just for debugging purpose
// this function display heap levelwise
void display(heap *h) {
    queue q = {.size = 0};
    enqueue(&q, h);

    heap *current = NULL;
    int nodes = 0;
    int limiter = 1;

    while (q.size) {
        current = dequeue(&q);

        if (nodes == limiter) {
            printf("\n");
            nodes = 0;
            limiter <<= 1;
        }

        nodes++;
        if (!current) continue;

        printf("%d ", current->data);
        enqueue(&q, current->left);
        enqueue(&q, current->right);
    }
}


int main() {
    heap *h = NULL;
    int size, length;

    printf("Enter how many elements do you want to enter into array: ");
    scanf("%d", &size);
    length = size;

    int *arr = calloc(size, sizeof(int));
    for (int i = 0; i < size; i++) {
        printf("Element %d = ", i);
        scanf("%d", &arr[i]);
        add(&h, arr[i]);
    }

    while (length > 0) {
        arr[length - 1] = rem(&h);
        length--;
    }

    printf("\nSorted array is: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}

-----------------------------------------------------------------------------------------------
Output:

Enter how many elements do you want to enter into array: 10
Element at position 0 = 22
Element at position 1 = 12
Element at position 2 = 45
Element at position 3 = 67
Element at position 4 = 23
Element at position 5 = 1
Element at position 6 = 89
Element at position 7 = 90
Element at position 8 = 55
Element at position 9 = 43

Sorted array is: 1 12 22 23 43 45 55 67 89 90
Process returned 0 (0x0)   execution time : 27.671 s
Press any key to continue.
