#include <stdio.h>
#include <stdlib.h>

typedef struct term {
    int coeff, power;
    struct term *next;
} poly;

poly *newterm(int coeff, int power) {
    poly *polynomial = malloc(sizeof(poly));

    polynomial->coeff = coeff;
    polynomial->power = power;
    polynomial->next = NULL;

    return polynomial;
}

poly *clone(poly *p) {
    poly *result = newterm(0, 0);
    poly *current = result;

    while (p) {
        current->coeff = p->coeff;
        current->power = p->power;

        p = p->next;
        if (p) {  // if we reached end of p then dont add new term to result
            current->next = newterm(0, 0);
            current = current->next;
        }
    }

    return result;
}

/*
    The below code is for if after subtraction the coefficient of
    any term has become 0 then its redundant in the polynomial
    so remove those redundant terms
*/
void filter0(poly **polynomial) {
    poly *prev = NULL, *current = *polynomial;

    while (current) {
        if (current->coeff == 0) {
            // if its not the first term
            if (prev) {
                poly *temp = current;
                prev->next = current->next;
                free(temp);
            }

            //  if its the first term
            else {
                *polynomial = current->next;
                free(current);
            }
        }

        prev = current;
        current = current->next;
    }
}

// this function inserts a new term at desired index
void insert(poly **polynomial, int index, int coeff, int power) {
    poly *current = *polynomial;
    int i = 0;

    while (i < index) {
        i++;
        current = current->next;
    }

    poly *term = newterm(coeff, power);

    term->next = current->next;
    current->next = term;
}

// this function adds the new term into the polynomial
void add(poly **polynomial, int coeff, int power) {
    if (coeff == 0)
        return;

    if (*polynomial == NULL) {
        *polynomial = newterm(coeff, power);
        return;
    }

    // if new power > highest power of polynomial
    // then add new term in front of polynomial
    if ((*polynomial)->power < power) {
        poly *temp = newterm(coeff, power);
        temp->next = *polynomial;
        *polynomial = temp;
        return;
    }

    int index = 0;
    poly *current = *polynomial;

    // traverse the polynomial to find appropriate place for the new term
    while (current->power > power) {
        current = current->next;
        index++;
    }

    // if found terms with equal powers then just add coeffs
    if (current->power == power) {
        current->coeff += coeff;
        return;
    }

    else
        insert(polynomial, index, coeff, power);
}

// this function subtracts the givne term from polynomial
void sub(poly **polynomial, int coeff, int power) {
    add(polynomial, -coeff, power);

    /*
        Okay so just the above code is required for subtraciton process

        The below code is for if after subtraction the coefficient of
        any term has become 0 then its redundant in the polynomial
        so remove those redundant terms
    */

    filter0(polynomial);
}

// below code multiplies a term throughout the polynomial
void mul(poly **polynomial, int coeff, int power) {
    poly *current = *polynomial;

    while (current) {
        current->power += power;
        current->coeff *= coeff;

        current = current->next;
    }
}

// this function adds two polynomials and returns the resulting polynomial
poly *add_poly(poly *p1, poly *p2) {
    poly *p3 = newterm(0, 0);
    poly *current = p3;

    while (p1 && p2) {
        if (p1->power > p2->power) {
            current->coeff = p1->coeff;
            current->power = p1->power;

            p1 = p1->next;
        }

        else if (p1->power == p2->power) {
            current->coeff = p1->coeff + p2->coeff;
            current->power = p1->power;

            p1 = p1->next;
            p2 = p2->next;
        }

        else {
            current->coeff = p2->coeff;
            current->power = p2->power;

            p2 = p2->next;
        }

        if (p1 && p2) {
            current->next = newterm(0, 0);
            current = current->next;
        }
    }

    while (p1) {
        current->next = newterm(p1->coeff, p1->power);

        current = current->next;
        p1 = p1->next;
    }

    while (p2) {
        current->next = newterm(p2->coeff, p2->power);

        current = current->next;
        p2 = p2->next;
    }

    return p3;
}

poly* sub_poly(poly *p1, poly *p2){
    poly *p3 = newterm(0, 0);
    poly *current = p3;

    while (p1 && p2) {
        if (p1->power > p2->power) {
            current->coeff = p1->coeff;
            current->power = p1->power;

            p1 = p1->next;
        }

        else if (p1->power == p2->power) {
            current->coeff = p1->coeff - p2->coeff;
            current->power = p1->power;

            p1 = p1->next;
            p2 = p2->next;
        }

        else {
            current->coeff = -p2->coeff;
            current->power = p2->power;

            p2 = p2->next;
        }

        if (p1 && p2) {
            current->next = newterm(0, 0);
            current = current->next;
        }
    }

    while (p1) {
        current->next = newterm(p1->coeff, p1->power);

        current = current->next;
        p1 = p1->next;
    }

    while (p2) {
        current->next = newterm(-p2->coeff, p2->power);

        current = current->next;
        p2 = p2->next;
    }

    filter0(&p3);
    return p3;
}

// this function multiplies two polynomials by mutating first parameter
poly* mul_poly(poly *self, poly *other){
    poly* p1 = self, *p2 = other;

    poly *result = clone(self);
    while(p2){
        mul(&result, p2->coeff, p2->power);
        poly* temp = clone(self);

        p2 = p2->next;
        if(p2){
            mul(&temp, p2->coeff, p2->power);
            result = add_poly(result, temp);
        }
    }

    return result;
}

void display(poly *p) {
    if (p == NULL) {
        printf("There are no terms in polynomial!\n");
        return;
    }

    int c;

    while (p) {
        c = p->coeff;

        if(c == -1)
            if(p->power == 0)   printf("- 1 ");
            else                printf("- x^%d ", p->power);
        else if (c < 0)         printf(" - %dx^%d ", -c, p->power);
        else if(c == 1 && p->power == 0)    printf("+ %d ", c);
        else if (c == 1)        printf("+ x^%d ", p->power);
        else if (p->power == 0) printf("+ %d", p->coeff);
        else                    printf("+ %dx^%d ", p->coeff, p->power);

        p = p->next;
    }
}

void main() {
    poly *p = NULL;
    poly *p2 = NULL;

    for (int i = 0; i < 3; i++)
        add(&p, 1, i);

    for (int i = 10; i < 12; i++)
        add(&p2, 1, i);

    display(p);
    printf("\n");
    display(p2);

    printf("\nAfter addition: ");
    display(add_poly(p2, p));


    printf("\nAfter subtracting: ");
    display(sub_poly(p2, p));

    printf("\nAfter multiplication: ");

    display(mul_poly(p2, p));

}
