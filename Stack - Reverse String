#include <stdio.h>
#define N 100

typedef struct Stack stack;

struct Stack  {
    int top;
    char arr[N];
};

int isEmpty(stack *s) {
    if(s -> top == -1)
        return 1;
    return 0;
}

int isFull(stack *s) {
    if(s -> top == N - 1)
        return 1;
    return 0;
}

void push(stack *s, char x) {
    if(!isFull(s))
        s -> arr[++s -> top] = x;
    else
        printf("\nStack Full.");
}

char pop(stack *s) {
    if(!isEmpty(s))
        return s -> arr[s -> top--];
    else
        printf("\nStack Empty.");
}

void displayStack(stack *s){
    int i;
    printf("\nDisplaying Stack: ");
    for(i = s -> top; i >= 0; i--){
        printf("\n%d: %c", i, s -> arr[i]);
    }
}

int main(){
    stack s;
    s.top = -1;
    char str[N];
    printf("Enter a String: ");
    fgets(str, N, stdin);
    printf("\nEntered String: %s", str);
    int i = 0;

    while(str[i] != '\n'){
        push(&s, str[i++]);
    }

    printf("\nReversed String: ");

    while(!isEmpty(&s)){
        printf("%c", pop(&s));
    }

    getche();
    return 0;
}


-------------------------------------------------------------- ANOTHER APPROACH -------------------------------------------------


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 25

struct stack {
  char stk[MAX];
  int top;
} s;

void push(char item) {
    if (s.top == (MAX - 1))
       printf ("Stack is Full\n");
    else {
       s.top = s.top + 1;
       s.stk[s.top] = item;
    }
}

char pop() {
      if(s.top == -1) {
            printf("Stack is Empty\n");
            exit(1);
      }
      return(s.stk[s.top--]);
}

int main() {
   int i = 0;
   char d, str[MAX];
   s.top = -1;
   printf("\nEnter a string : ");
   gets(str);

   for(; str[i] != '\0'; i++) {
       push(str[i]);
   }
   printf("\nReverse String is :");
   while(s.top > -1) {
      d = pop();
      printf("%c", d);
   }
   return 0;
}
