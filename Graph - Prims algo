Problem Statement - Write a C program to accept undirected weighted graph 
from user and represent it with Adjacency Matrix and find a minimum 
spanning tree using Prims algorithm.

---------------------------------------------------------------------
Code - 

#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int edges[10][10];
    int dim;
} graph;

typedef struct {
    int v1, v2;
    int w;
} edge;

typedef struct {
    int data[15];
    int size;
} stack;
typedef stack queue;

void push(stack *s, int val){
    s->data[s->size] = val;
    s->size++;
}

int pop(stack *s){
    s->size--;
    int data = s->data[s->size];
    s->data[s->size] = 0;
    return data;
}

void enqueue(queue *q, int val){
    push(q, val);
}

int dequeue(queue *q){
    int result = q->data[0];

    for (int i = 0; i < q->size - 1; i++)
        q->data[i] = q->data[i + 1];

    return result;
}

// this function swaps contents of two edges
void swap(edge *e1, edge *e2) {
    edge temp;
    temp.v1 = e1->v1;
    temp.v2 = e1->v2;
    temp.w = e1->w;

    e1->v1 = e2->v1;
    e1->v2 = e2->v2;
    e1->w = e2->w;

    e2->v1 = temp.v1;
    e2->v2 = temp.v2;
    e2->w = temp.w;
}

// this function copies contents of one edge into other
void copy(edge *dest, edge *src) {
    dest->v1 = src->v1;
    dest->v2 = src->v2;
    dest->w = src->w;
}

// this function returns number of edges in lower triangle of matrix
int countEdges(graph *g) {
    int edges = 0;

    for(int i = 0; i < g->dim; i++)
        for (int j = 0; j < i; j++)
            if(g->edges[i][j]) edges++;

    return edges;
}

int rowsum() {
    int sum = 0;
    return sum;
}

void insertEdge(graph *g, int v1, int v2, int weight) {
    g->edges[v1][v2] = weight;
    g->edges[v2][v1] = weight;
}

void removeEdge(graph *g, int v1, int v2) {
    g->edges[v1][v2] = 0;
    g->edges[v2][v1] = 0;
}

void sortedinsert(edge* pool, int len, edge *new) {
    pool[len].v1 = new->v1;
    pool[len].v2 = new->v2;
    pool[len].w = new->w;

    int i = len;
    while(i > 1 && pool[i].w < pool[i - 1].w) {
        swap(pool + i, pool + i - 1);
        i--;
    }
}

edge* poll(edge *pool, int len) {
    edge* result = malloc(sizeof(edge));
    result->w = pool->w;
    result->v1 = pool->v1;
    result->v2 = pool->v2;

    for(int i = 0; i < len - 1; i++)
        copy(pool + i, pool + i + 1);

    return result;
}


graph* prim(graph *g){
    edge pool[15] = {0};
    int poolsize = 0;
    int visited[10] = {0};

    graph *result = calloc(1, sizeof(graph));
    result->dim = g->dim;

    int hasedge = 0;
    edge minedge = {0};

    for (int i = 0; i < g->dim; i++) {
        hasedge = 0;
        minedge.w = 1 << 31 - 1;

        for (int j = i; j < g->dim; j++) {
            if(g->edges[i][j] != 0){
                // if current edge is cheaper than pools smallest edge
                if(g->edges[i][j] < pool[0].w){
                    edge* temp = poll(pool, poolsize);
                    poolsize--;

                    minedge.v1 = temp->v1;
                    minedge.v2 = temp->v2;
                    minedge.w = temp->w;

                    edge current;
                    current.v1 = i;
                    current.v2 = j;
                    current.w = g->edges[i][j];

                    sortedinsert(pool, poolsize, &current);
                    poolsize++;
                }

                // if we have previously encountered an edge
                if(hasedge){

                    // if current edge is cheaper than our minimum edge
                    if(g->edges[i][j] < minedge.w){
                        // then insert minimum edge into pool
                        sortedinsert(pool, poolsize, &minedge);
                        poolsize++;

                        // and make current edge as the new minimum
                        minedge.v1 = i;
                        minedge.v2 = j;
                        minedge.w = g->edges[i][j];
                    }

                    // otherwise add current edge into pool
                    else {
                        edge temp;
                        temp.v1 = i;
                        temp.v2 = j;
                        temp.w = g->edges[i][j];
                        sortedinsert(pool, poolsize, &temp);
                        poolsize++;
                    }
                }

                // if this is the first edge we encountered then make it our minimum edge
                else{
                    minedge.v1 = i;
                    minedge.v2 = j;
                    minedge.w = g->edges[i][j];

                    hasedge = 1;
                }
            }
        }

        // if we did not touch both vertices yet
        if(!(visited[minedge.v1] && visited[minedge.v2]) && minedge.w != (1 << 31 - 1)){
            insertEdge(result, minedge.v1, minedge.v2, minedge.w);
            visited[minedge.v1] = 1;
            visited[minedge.v2] = 1;
        }
    }

    return result;
}

void display(graph *g){
    puts("");
    printf("  | ");
    for (int i = 0; i < g->dim; i++)
        printf("%d ", i);
    puts("");

    for(int i = 0; i < 4 * g->dim; i++)
        printf("-");
    puts("");

    for (int i = 0; i < g->dim; i++) {
        printf("%d | ", i);
        for (int j = 0; j < g->dim; j++)
            printf("%d ", g->edges[i][j]);
        puts("");
    }


}

void menu(){
    puts("\n1. Insert edge");
    puts("2. Remove Edge");
    puts("3. Apply Prims Algorithm");
    puts("4. Display Graph");
    puts("5. Exit");
}

void start(graph *g){
    int choice, v1, v2, w;
    loop:
    printf("\nEnter your choice: ");
    scanf("%d", &choice);

    switch(choice){
        case 1:
            printf("Enter which vertex you want to attach an edge: ");
            scanf("%d", &v1);
            printf("Enter other vertex: ");
            scanf("%d", &v2);
            printf("Enter weight: ");
            scanf("%d", &w);
            g->edges[v1][v2] = w;
            g->edges[v2][v1] = w;
            break;

        case 2:
            printf("Enter which vertex you want to remove an edge: ");
            scanf("%d", &v1);
            printf("Enter other vertex: ");
            scanf("%d", &v2);
            g->edges[v1][v2] = 0;
            g->edges[v2][v1] = 0;
            break;

        case 3:
            // free(g);
            g = prim(g);
            break;

        case 4:
            display(g);
            break;

        case 5:
            return;

        default:
            puts("Type a valid choice!");
    }
    goto loop;
}

void main(){
    graph g = {0};
    int v = 4;

    printf("Enter number of vertices: ");
    scanf("%d", &v);
    g.dim = v;

    /*insertEdge(&g, 0, 1, 8);
    insertEdge(&g, 2, 1, 5);
    insertEdge(&g, 3, 1, 2);
    insertEdge(&g, 2, 3, 1);

    display(&g);
    graph *new = prim(&g);
    display(new);
    */

    menu();
    start(&g);
}


-----------------------------------------------------------
Output

Enter number of vertices: 4

1. Insert edge
2. Remove Edge
3. Apply Prims Algorithm
4. Display Graph
5. Exit

Enter your choice: 1
Enter which vertex you want to attach an edge: 0
Enter other vertex: 1
Enter weight: 4

Enter your choice: 1
Enter which vertex you want to attach an edge: 2
Enter other vertex: 1
Enter weight: 5

Enter your choice: 1
Enter which vertex you want to attach an edge: 1
Enter other vertex: 3
Enter weight: 2

Enter your choice: 1
Enter which vertex you want to attach an edge: 2
Enter other vertex: 3
Enter weight: 1

Enter your choice: 4

  | 0 1 2 3
----------------
0 | 0 4 0 0
1 | 4 0 5 2
2 | 0 5 0 1
3 | 0 2 1 0

Enter your choice: 3

Enter your choice: 4

  | 0 1 2 3
----------------
0 | 0 4 0 0
1 | 4 0 0 2
2 | 0 0 0 1
3 | 0 2 1 0

Enter your choice: 5

Process returned 4201697 (0x401CE1)   execution time : 186.129 s
Press any key to continue.
