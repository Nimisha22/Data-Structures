#include <limits.h>
#include <stdio.h>
#include <stdlib.h>

struct Queue {
    int front, rear, size;
    unsigned capacity;
    int* array;
};

// function to create a queue of given capacity.
// It initializes size of queue as 0
struct Queue* createQueue(unsigned capacity) {
    struct Queue* queue = (struct Queue*) malloc (sizeof(struct Queue));
    queue -> capacity = capacity;
    queue -> front = queue -> size = 0;

    // This is important, see the enqueue
    queue -> rear = capacity - 1;
    queue -> array = (int*) malloc (queue->capacity * sizeof(int));
    return queue;
}

// Queue is full when size becomes equal to the capacity
int isFull(struct Queue* queue) {
    return (queue -> size == queue -> capacity);
}

// Queue is empty when size is 0
int isEmpty(struct Queue* queue) {
    return (queue -> size == 0);
}

// Function to add an item to the queue. It changes rear and size
void enqueue(struct Queue* queue, int item) {
    if (isFull(queue))
        return;
    queue -> rear = (queue -> rear + 1) % queue -> capacity;
    queue -> array[queue -> rear] = item;
    queue -> size = queue -> size + 1;
    printf("\n%d enqueued to queue\n", item);
}

// Function to remove an item from queue. It changes front and size
int dequeue(struct Queue* queue) {
    if (isEmpty(queue))
        return INT_MIN;
    int item = queue -> array[queue -> front];
    queue -> front = (queue -> front + 1) % queue -> capacity;
    queue -> size = queue -> size - 1;
    return item;
}

// Function to get front of queue
int front(struct Queue* queue) {
    if (isEmpty(queue))
        return INT_MIN;
    return queue -> array[queue -> front];
}

// Function to get rear of queue
int rear(struct Queue* queue) {
    if (isEmpty(queue))
        return INT_MIN;
    return queue -> array[queue -> rear];
}


int main() {
    struct Queue* queue = createQueue(1000);
    int choice, flag = 1, en;

    while(flag == 1) {
        printf("\n\nPlease enter number corresponding to the action you want to perform\n");
        printf("1. Insert new passenger at rear of queue\n");
        printf("2. Display passenger at front of queue\n");
        printf("3. Remove passenger from front of queue\n");
        printf("4. Terminate program\n");

        scanf("\n\n%d", &choice);

        switch(choice){
            case 1: printf("\n\nPlease enter value to enqueue");
                    scanf("%d", &en);

                    enqueue(queue, en);
                    break;

            case 2: printf("\n\nFront passenger is %d\n", front(queue));
                    break;

            case 3: printf("\n\n%d dequeued from queue\n\n", dequeue(queue));
                    break;

            case 4: flag = 0;
                    break;

            default: printf("\n\nWrong choice");


        }
    }

    //printf("Rear item is %d\n", rear(queue));

    return 0;
}
