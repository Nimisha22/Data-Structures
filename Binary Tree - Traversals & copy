Problem Statement -
Write a menu driven program to create a Binary Tree and perform following non-recursive operations on it.
1. Postorder Traversal, 2. Preorder Traversal, 3. Inorder Traversal, 4.Copy a tree.

---------------------------------------------------------------------------------------------------------
Code -

#include <stdio.h>
#include <stdlib.h>


typedef struct node {
    int data;
    struct node *left, *right;
} tree;


typedef struct {
    tree *data[50];
    int size;
} stack;
typedef stack queue;


tree* newnode(int value) {
    tree *node = malloc(sizeof(tree));
    node->data = value;
    node->left = NULL;
    node->right = NULL;

    return node;
}

tree *root = NULL;

void push(stack *s, tree *n) {
    s->data[s->size] = n;
    s->size++;
}


tree* pop(stack *s) {
    tree *ret = s->data[s->size - 1];
    s->size--;
    return ret;
}


tree* peek(stack *s) {
    return s->data[s->size - 1];
}


void enqueue(queue *q, tree *n){
    q->data[q->size] = n;
    q->size++;
}


tree* dequeue(queue *q){
    tree *front = q->data[0];

    for (int i = 0; i < q->size - 1; i++)
        q->data[i] = q->data[i + 1];
    q->size--;

    return front;
}


// Function to insert a value for copying function
void insert(tree **root, int value) {
    if(root == NULL)
        return;

    if (*root == NULL) {
        *root = newnode(value);
        return;
    }

    tree *current = *root;

    while (current != NULL) {
        if (value <= current->data) {
            if (current->left == NULL) {
                current->left = newnode(value);
                return;
            } else
                current = current->left;
        }

        else if (current->right == NULL) {
            current->right = newnode(value);
            return;
        } else
            current = current->right;
    }
}


// Function to insert a value according to user choice
void insert_choice(tree **root, int value) {
    int choice;
    if(root == NULL)
        return;

    if (*root == NULL) {
        *root = newnode(value);
        return;
    }

    tree *current = *root;

    while (current != NULL) {
        printf("\nWhere do you want to insert 1. Left 2. Right\n");
        scanf("%d", &choice);
        if (choice == 1) {
            if (current->left == NULL) {
                current->left = newnode(value);
                return;
            } else {
                printf("Left is already occupied.\n\n");
                current = current->left;
            }
        }

        else if (choice == 2) {
           if (current->right == NULL) {
                current->right = newnode(value);
                return;
            } else {
                printf("Right is already occupied.\n\n");
                current = current->right;
            }
        }

        else
            printf("Wrong choice");
    }
}


// Function for post order traversal (LRD)
void post_display(tree *root) {
    printf("\nPostorder sequence is\n\n");
    if (root == NULL) {
        printf("Root is empty");
        return;
    }

    stack nodes = {.size = 0};
    tree *current = root;
    tree *prev = NULL;

    do {
        while(current) {
            push(&nodes, current);
            current = current->left;
        }
        current = peek(&nodes);

        // if right exists and we have not yet touched/processed right then process right side
        if(current->right && prev != current->right) {
            current = current->right;
        }
        else {
            printf("%d ", current->data);
            current = NULL;
            prev = pop(&nodes);
        }
    } while(nodes.size > 0);
    printf("\n\n");
}


// Function for preorder traversal (DLR)
void pre_display(tree *root) {
    printf("\nPreorder sequence is\n\n");
    if(root == NULL) {
        printf("Tree is empty");
        return;
    }

    stack nodes = {.size = 0};
    tree *current = root;
    push(&nodes, root);

    do {
        while(current) {
            printf("%d ", current->data);
            push(&nodes, current);
            current = current->left;
        }
        current = pop(&nodes)->right;

    } while(nodes.size);
    printf("\n\n");
}


// Function fot in order traversal (LDR)
void in_display(tree *root) {
    printf("\nInorder sequence is\n\n");
    if(root == NULL) {
        printf("Tree is empty");
        return;
    }

    stack nodes = {.size = 0};
    tree *current = root;
    tree *prev = root;

    do {
        while(current) {
            push(&nodes, current);
            current = current->left;
        }

        current = pop(&nodes);
        printf("%d ", current->data);

        if(current->right && current->right == prev) {
            prev = current;
            continue;
        }
        prev = current;
        current = current->right;

    } while(nodes.size || current);
    printf("\n\n");
}


// Function to copy tree (DLR)
tree *copy_tree(tree *root) {
    tree *newroot = NULL;
    queue q = {.size = 0};
    tree *current = root;
    enqueue(&q, root);

    while (q.size) {
        current = dequeue(&q);
        if (!current)
            continue;
        insert(&newroot, current->data);

        enqueue(&q, current->left);
        enqueue(&q, current->right);
    }
    printf("\nPreorder Sequence of copied tree is :\n");
    return newroot;
}


// Function to get choice from user
void menu() {
    int choice, val, flag = 0;

    for(int i = 0; i < 50; i++)
        printf("-");

    printf("\n1. Insert a node\n2. Display the tree in postorder\n3. Display the tree in preorder\n4. Display the tree in inorder\n5. Copy a tree\n6. Exit\n");

    for(int i = 0; i < 50; i++)
        printf("-");

    while(flag == 0) {
        printf("\nEnter your choice: ");
        scanf("%d", &choice);
        switch(choice) {
        case 1:
            printf("Enter a number: ");
            scanf("%d", &val);
            insert_choice(&root, val);
            menu();
            break;
        case 2:
            post_display(root);
            menu();
            break;
        case 3:
            pre_display(root);
            menu();
            break;
        case 4:
            in_display(root);
            menu();
            break;
        case 5:
            pre_display(copy_tree(root));
            menu();
            break;
        case 6:
            exit(0);

        default:
            printf("Enter a valid choice!");
            menu();
        }
    }
    printf("\n");
}


int main() {
    menu();
    return 0;
}


------------------------------------------------------------------------------------
Output - 

--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 1
Enter a number: 30
--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 1
Enter a number: 20

Where do you want to insert 1. Left 2. Right
1
--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 1
Enter a number: 40

Where do you want to insert 1. Left 2. Right
2
--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 1
Enter a number: 45

Where do you want to insert 1. Left 2. Right
2
Right is already occupied.


Where do you want to insert 1. Left 2. Right
2
--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 1
Enter a number: 35

Where do you want to insert 1. Left 2. Right
2
Right is already occupied.


Where do you want to insert 1. Left 2. Right
1
--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 1
Enter a number: 10

Where do you want to insert 1. Left 2. Right
1
Left is already occupied.


Where do you want to insert 1. Left 2. Right
1
--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 2

Postorder sequence is

10 20 35 45 40 30

--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 3

Preorder sequence is

30 20 10 40 35 45

--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 4

Inorder sequence is

10 20 30 35 40 45

--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 5

Preorder Sequence of copied tree is :

Preorder sequence is

30 20 10 40 35 45

--------------------------------------------------
1. Insert a node
2. Display the tree in postorder
3. Display the tree in preorder
4. Display the tree in inorder
5. Copy a tree
6. Exit
--------------------------------------------------
Enter your choice: 6

Process returned 0 (0x0)   execution time : 140.418 s
Press any key to continue.

