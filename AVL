Problem Statement -
Write a program to accept numeric data and create height balanced tree. Display tree levelwise.

Code -

#include <stdio.h>
#include <stdlib.h>

#undef max


typedef struct node {
    int data;
    struct node *left, *right;
    int balance;
} tree;


typedef struct {
    tree* data[20];
    int size;
} stack;
typedef stack queue;


void push(stack *s, tree* node){
    s->data[s->size] = node;
    s->size++;
}


tree* pop(stack *s){
    tree* temp = s->data[s->size - 1];
    s->size--;
    s->data[s->size] = NULL;
    return temp;
}


void enqueue(queue *q, tree* node){
    q->data[q->size] = node;
    q->size++;
}


tree* dequeue(queue *q){
    tree* temp = q->data[0];
    q->size--;

    for(int i = 0; i < q->size; i++)
        q->data[i] = q->data[i + 1];

    return temp;
}


int contains(stack *s, tree* node){
    for(int i = s->size - 1; i >= 0; i--)
        if(s->data[i]->data == node->data)
            return 1;

    return 0;
}


tree* newnode(int data){
    tree* temp = malloc(sizeof(tree));
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    temp->balance = 0;
    return temp;
}


int height(tree *root){
    if(root == NULL)
        return 0;
    int max_height = 1;
    int height = 1;

    stack s = {.size = 0};
    push(&s, root);
    queue visited = {.size = 0};
    enqueue(&visited, root);

    do {
        if(root->left != NULL && !contains(&visited, root->left)){
            push(&s, root);
            enqueue(&visited, root->left);
            root = root->left;
            height++;
            continue;
        }

        if(root->right != NULL && !contains(&visited, root->right)){
            push(&s, root);
            enqueue(&visited, root->right);
            root = root->right;
            height++;
            continue;
        }

        root = pop(&s);
        if(height > max_height)
            max_height = height;
        // if(root == NULL)
            height--;

    } while(s.size > 0);

    return max_height;
}


int getBalanceFactor(tree* node){
    return height(node->left) - height(node->right);
}

// this function returns parent of node
tree* getParent(tree* root, tree* node){
    if(root == node) return root;
    tree* current = root;

    while(current != NULL){
        if(current->data < node->data){
            if(current->right == node)
                return current;
            else
                current = current->right;
        }

        else if(current->left == node)
            return current;
        else
            current = current->left;
    }

    return current;
}

int max(int a, int b){
    return (a > b) ? a : b;
}


// this function right rotates node's right subtree
tree* RR(tree* node){
    tree *lchild = node->left;
    tree *grandchild = lchild->right;

    // rotation
    lchild->right = node;
    node->left = grandchild;

    return lchild;
}


// this function left rotates node's left subtree
tree* LL(tree* node){
    tree *rchild = node->right;
    tree *grandchild = rchild->left;

    // rotation
    rchild->left = node;
    node->right = grandchild;

    return rchild;
}


// this function balances the tree
tree* stabilise(tree *node, int data){
    if(node == NULL)
        return node;

    node->balance = getBalanceFactor(node);
    if(-1 <= node->balance && node->balance <= 1)
        return node;

    else if(node->balance > 1){
        if(data > node->left->data)
            node->left = LL(node->left);
        return RR(node);
    }

    else {
        if(data < node->right->data)
            node->right = RR(node->right);
        return LL(node);
    }
}


// this function inserts a new node into tree and returns new root
tree* insert(tree* root, int data){
    if(root == NULL)
        return newnode(data);

    tree* current = root;
    stack traverse = {.size = 0};

    while (current != NULL) {
        if (data < current->data) {
            if (current->left == NULL) {
                current->left = newnode(data);
                break;
            } else {
                push(&traverse, current);
                current = current->left;
            }
        }

        else if(data == current->data)
            return root;

        else if (current->right == NULL) {
            current->right = newnode(data);
            break;
        } else {
            push(&traverse, current);
            current = current->right;
        }
    }

    tree *parent, *subroot, *child;
    do {
        parent = getParent(root, current);
        subroot = stabilise(parent, data);
        child = parent;
        parent = getParent(root, child);

        if(parent->right == subroot->left)
            parent->right = subroot;
        if(parent->left == subroot->right)
            parent->left = subroot;

        current = pop(&traverse);
    } while(traverse.size > 0);

    return (child == root) ? subroot : root;
}


void display_levelwise(tree *root) {
    if(root == NULL) {
        printf("Tree is empty.");
        return;
    }
    #define space(h) for(int i = 0; i < (h); i++) printf(" ");

    int h = height(root);
    queue q = {.size = 0};
    tree *current = NULL;
    enqueue(&q, root);
    int nodes = 0;      // count of how many nodes printed
    int limiter = 1;    // used to print newline

    space(h + 2);

    while(q.size) {
        current = dequeue(&q);

        if(nodes == limiter){
            printf("\n");
            space(h);
            h--;
            nodes = 0;          // reset nodes
            limiter <<= 1;      // since every level has at most twice the nodes as previous level, double the limiter
        }

        nodes++;
        if(!current) {
            printf("  ");
            continue;
        }

        printf("%d ", current->data);
        space(h);

        enqueue(&q, current->left);
        enqueue(&q, current->right);
    }
    puts("\n");
    #undef space
}


int main(){
   int a, flag = 1;
   printf("Enter root node (first) data\n");
   scanf("%d", &a);
   tree* head = insert(NULL, a);

   printf("Press 1 to add new node\nPress 0 to end\n");
   scanf("%d", &flag);
   while (flag == 1) {
        printf("Enter new node data\n");
        scanf("%d", &a);
        printf("\n");
        head = insert(head, a);
        display_levelwise(head);
        printf("Press 1 to add new node\nPress 0 to end\n");
        scanf("%d", &flag);
   }
   return 0;
}


---------------------------------------
Output - 1

Enter root node (first) data
20
Press 1 to add new node
Press 0 to end
1
Enter new node data
30

    20
      30


Press 1 to add new node
Press 0 to end
1
Enter new node data
40

    30
  20  40


Press 1 to add new node
Press 0 to end
1
Enter new node data
10

     30
   20   40
 10


Press 1 to add new node
Press 0 to end
1
Enter new node data
25

     30
   20   40
 10  25


Press 1 to add new node
Press 0 to end
1
Enter new node data
46

      30
   20    40
 10  25    46


Press 1 to add new node
Press 0 to end
1
Enter new node data
35

      30
   20     40
 10  25  35  46


Press 1 to add new node
Press 0 to end
1
Enter new node data
32

        30
    20      40
 10   25   35   46
          32


Press 1 to add new node
Press 0 to end
1
Enter new node data
12

        30
    20      40
 10   25   35   46
   12    32


Press 1 to add new node
Press 0 to end
1
Enter new node data
42

       30
    20    40
   10   25   35   46
    12      32   42


Press 1 to add new node
Press 0 to end
1
Enter new node data
56

       30
    20    40
   10   25   35   46
    12      32   42  56


Press 1 to add new node
Press 0 to end
1
Enter new node data
42

       30
    20    40
   10   25   35   46
    12      32   42  56


Press 1 to add new node
Press 0 to end
0

Process returned 0 (0x0)   execution time : 64.778 s
Press any key to continue.




Output 2-

Enter root node (first) data
1
Press 1 to add new node
Press 0 to end
1
Enter new node data
2

    1
      2


Press 1 to add new node
Press 0 to end
1
Enter new node data
3

    2
  1   3


Press 1 to add new node
Press 0 to end
1
Enter new node data
4

     2
   1   3
         4


Press 1 to add new node
Press 0 to end
1
Enter new node data
5

     2
   1   4
      3  5


Press 1 to add new node
Press 0 to end
1
Enter new node data
6

     4
   2   5
  1 3    6


Press 1 to add new node
Press 0 to end
1
Enter new node data
7

     4
   2   6
  1 3  5 7


Press 1 to add new node
Press 0 to end
0

Process returned 0 (0x0)   execution time : 15.518 s
Press any key to continue.
