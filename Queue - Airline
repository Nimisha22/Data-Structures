5	We Fly Anywhere Airlines (WFAA) is considering redesigning their ticket counters for airline passengers. 
They would like to have two separate waiting lines, one for regular customers and one for frequent flyers. 
Assuming there is only one ticket agent available to serve all passengers, they would like to determine 
the average waiting time for both types of passengers using various strategies for taking passengers from
the waiting lines. WAP to simulate this situation. 	5	24	43	58	

--------------------------------------------------------------------------------------------------------------
#include<stdio.h>

#define max 20

int frontl = 0, rearl = -1, frontt = 0, reart = -1;
int takeoff[max], landing[max];
int runway1[2], runway2[2];
int final[20];
int i, val, j = 0, k = 0, l = 0;


int add_in_landingq(int val) {
    if(rearl == max-1 && frontl != 0) {
        rearl = 0;
        landing[rearl] = val;
    } 
    else
        rearl++;
        landing[rearl] = val;
    return(0);
}


int add_in_takeoffq(int val) {
    if(reart == max-1 && frontt != 0) {
        reart = 0;
        takeoff[reart] = val;
    }
    else
        reart++;
        takeoff[reart] = val;
    return (0);
}


int del_from_takeoffq() {
    val = takeoff[frontt];
    if(frontt == reart) {
        frontt = 0;
        reart = -1;
    }
    else
    {
        if(frontt == max-1)
            frontt = 0;
        else
            frontt++;
    }
    return val;
}


int del_from_landingq() {
    val = landing[frontl];
    if(frontl == rearl) {
        frontl = 0;
        rearl = -1;
    }
    else
    {
        if(frontl == max-1)
            frontl = 0;
        else
            frontl++;
    }
    return val;
}


int landingqempty() {
    if(frontl == 0 && rearl == -1) {
        return 0;
    }
    else
        return 1;
}


int main() {
    runway1[1] = 0;
    runway2[1] = 0;
    int opt;
    for(i = 0; i <= 120; i = i + 5) {
        A:
        printf("\nenter 1 for landing request.\nenter 2 for takeoff request.\n");
        scanf("%d", &opt);
        if(opt == 1) {
            if(runway1[1] == 0) {
                runway1[1] = 1;
                i = i + 5;
                goto A;
            }
            else if(runway2[1] == 0) {
                runway2[1] = 1;
                i = i + 5;
                goto A;
            }
            else {
                add_in_landingq(opt);
            }
            
            if(i % 15 == 0) {
                final[j] = runway1[1];
                if(final[j] == 2) {
                    printf("\nairplane request of takeoff is completed at time t = %d min\n",i);
                    k++;
                    j++;
             } else {
                    printf("\nairplane request of landing is completed at time t = %d min\n",i);
                    l++;
                    j++;
             }
             
             if(landingqempty() == 0) {
                    runway1[1] = del_from_takeoffq();
              }
              else
                    runway1[1] = del_from_landingq();
            }
            
            else if(i%15 == 5) {
                final[j] = runway2[1];
                if(final[j] == 2) {
                    printf("\nairplane request of takeoff is completed at time t = %d min\n",i);
                    k++;
                    j++;
                }
                else {
                    printf("\nairplane request of landing is completed at time t = %d min\n",i);
                    l++;
                    j++;
                }
                
                
                if(landingqempty() == 0) {
                    runway2[1] = del_from_takeoffq();
                }
                else
                    runway2[1] = del_from_landingq();
            }
        }
        
        
        if(opt == 2) {
            if(runway1[1] == 0) {
                runway1[1] = 2;
                i = i + 5;
                goto A;
            }
            else if(runway2[1] == 0) {
                runway2[1] = 2;
                i = i + 5;
                goto A;
            }
            
            else {
                add_in_takeoffq(opt);
            }
            
            
            if(i % 15 == 0) {
                final[j] = runway1[1];
                if(final[j] == 2) {
                    printf("\nairplane request of takeoff is completed at time t = %d min\n",i);
                    k++;
                    j++;
                }
                else {
                    printf("\nairplane request of landing is completed at time t = %d min\n",i);
                    l++;
                    j++;
                }
                
                if(landingqempty() == 0)
                    runway1[1] = del_from_takeoffq();
                else
                    runway1[1] = del_from_landingq();
            }
            
            else if(i % 15 == 5) {
                final[j] = runway2[1];
                if(final[j] == 2) {
                    printf("\nairplane request of takeoff is completed at time t = %d min\n",i);
                    k++;
                    j++;
                }
                else {
                    printf("\nairplane request of landing is completed at time t = %d min\n",i);
                    l++;
                    j++;
                }
                
                if(landingqempty() == 0)
                    runway2[1] = del_from_takeoffq();
                else
                    runway2[1] = del_from_landingq();
            }
        }
    }
    
    printf("total number of landings and takeoffs done = %d\n",j);
    printf("total number of landing's done = %d\n",l);
    printf("total number of takeoff's done = %d\n",k);
    float avg_time;
    avg_time = 120.0 / j;
    printf("average waiting time for landing or takeoff = %.1f",avg_time);
    avg_time = 120.0 / l;
    printf("\naverage waiting time for landing = %.1f",avg_time);
    avg_time = 120.0 / k;
    printf("average waiting time for takeoff = %.1f",avg_time);

    printf("\ndisplay of final queue in which sequence takeoff's and landing's are done.\n");
    for(i = 0; i < j; i++) {
        if(final[i] == 1)
            printf("Landing,");
        if(final[i] == 2)
            printf("Takeoff,");
    }
}
